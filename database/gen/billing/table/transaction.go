//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Transaction = newTransactionTable("billing", "transaction", "")

type transactionTable struct {
	mysql.Table

	// Columns
	Txnid       mysql.ColumnInteger
	Loanid      mysql.ColumnInteger
	Payment     mysql.ColumnFloat
	Paymentdate mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type TransactionTable struct {
	transactionTable

	NEW transactionTable
}

// AS creates new TransactionTable with assigned alias
func (a TransactionTable) AS(alias string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionTable with assigned schema name
func (a TransactionTable) FromSchema(schemaName string) *TransactionTable {
	return newTransactionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionTable with assigned table prefix
func (a TransactionTable) WithPrefix(prefix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionTable with assigned table suffix
func (a TransactionTable) WithSuffix(suffix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionTable(schemaName, tableName, alias string) *TransactionTable {
	return &TransactionTable{
		transactionTable: newTransactionTableImpl(schemaName, tableName, alias),
		NEW:              newTransactionTableImpl("", "new", ""),
	}
}

func newTransactionTableImpl(schemaName, tableName, alias string) transactionTable {
	var (
		TxnidColumn       = mysql.IntegerColumn("txnid")
		LoanidColumn      = mysql.IntegerColumn("loanid")
		PaymentColumn     = mysql.FloatColumn("payment")
		PaymentdateColumn = mysql.TimestampColumn("paymentdate")
		allColumns        = mysql.ColumnList{TxnidColumn, LoanidColumn, PaymentColumn, PaymentdateColumn}
		mutableColumns    = mysql.ColumnList{LoanidColumn, PaymentColumn, PaymentdateColumn}
	)

	return transactionTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Txnid:       TxnidColumn,
		Loanid:      LoanidColumn,
		Payment:     PaymentColumn,
		Paymentdate: PaymentdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
